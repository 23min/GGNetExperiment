@inject IJSRuntime JSRuntime
@implements IDisposable



<svg id=@Id xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 @Width @Height">

    @foreach (var r in rectangles)
    {
        <rect x=@(r.X) y=@(r.Y) width=@(r.Width) height=@r.Height style="fill:rgb(222,222,222);stroke-width:0.5;stroke:rgb(20,20,20)" />
    }

</svg>

@code{
    [Parameter]
    public string Id {get;set;}

    [Parameter]
    public int Width {get;set;}
    
    [Parameter]
    public int Height {get;set;}

    private List<Rectangle> rectangles = new List<Rectangle>();
    private DotNetObjectReference<Symbol> referenceToSelf;
    private bool finished = false;
    private TimeSpan timestamp;

    protected override async Task OnInitializedAsync()
    {
        var rnd = new System.Random();
        var shapes = new List<Rectangle>();

        for (int i=0; i<25; i++)
        {
            // random rectangle
            var w = rnd.Next(0, Width/10);
            var h = rnd.Next(0, Height/10);
            var posx = rnd.Next(0, Width);
            var posy = rnd.Next(0, Height);
            var r = new Rectangle() {
                Width = w, 
                Height = h,
                X = posx,
                Y = posy
            };
            shapes.Add(r);
            rectangles = shapes;
        }
        await Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        referenceToSelf = DotNetObjectReference.Create(this);
        if (firstRender) JSRuntime.InvokeAsync<int>("startAnimation", referenceToSelf);
    }

    [JSInvokable]
    public bool AnimationFrame(double milliseconds)
    {
        if (finished) return false;
        timestamp = TimeSpan.FromMilliseconds(milliseconds);

        foreach(var r in rectangles)
        {
            r.X += 1;
            r.Y += 1;
            if (r.X > Width) r.X = 0;
            if (r.Y > Height) r.Y = 0;
        }

        StateHasChanged();
        return true;
    }

    public void Dispose()
    {
        referenceToSelf?.Dispose();
        finished = true;
    }


    private class Rectangle{
        public int Width {get;set;}
        public int Height {get;set;}
        public int X {get;set;}
        public int Y {get;set;}
        public (int, int, int) RgbFill {get;set;}
        public (int, int, int) RgbStroke {get;set;}
    }

}
